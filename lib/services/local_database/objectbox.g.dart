// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../models/weather_daily_model.dart';
import '../../models/weather_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 986031120985005609),
      name: 'WeatherDailyModel',
      lastPropertyId: const IdUid(10, 2043371379810468050),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3950631599976219130),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1972585121101424104),
            name: 'main',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6980265294667076184),
            name: 'humidity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3732437775722481796),
            name: 'windSpeed',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6481342719121727079),
            name: 'precipitation',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 292407206492906667),
            name: 'time',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7786084273272983953),
            name: 'suhu',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 1067458516159514865),
            name: 'maxSuhu',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1165330476074312682),
            name: 'iconId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2043371379810468050),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 1474493557519230460),
      name: 'WeatherModel',
      lastPropertyId: const IdUid(9, 3935671546937559894),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7094167261333990032),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3737060371212237731),
            name: 'main',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4641342089360423675),
            name: 'humidity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4733964974393715227),
            name: 'windSpeed',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 774057999217244475),
            name: 'precipitation',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3326162812131286890),
            name: 'time',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1540681202054755225),
            name: 'suhu',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8332224960363734169),
            name: 'iconId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3935671546937559894),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(2, 1474493557519230460),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    WeatherDailyModel: EntityDefinition<WeatherDailyModel>(
        model: _entities[0],
        toOneRelations: (WeatherDailyModel object) => [],
        toManyRelations: (WeatherDailyModel object) => {},
        getId: (WeatherDailyModel object) => object.id,
        setId: (WeatherDailyModel object, int id) {
          object.id = id;
        },
        objectToFB: (WeatherDailyModel object, fb.Builder fbb) {
          final mainOffset = fbb.writeString(object.main);
          final suhuOffset = fbb.writeString(object.suhu);
          final maxSuhuOffset =
              object.maxSuhu == null ? null : fbb.writeString(object.maxSuhu!);
          final iconIdOffset = fbb.writeString(object.iconId);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, mainOffset);
          fbb.addInt64(2, object.humidity);
          fbb.addFloat64(3, object.windSpeed);
          fbb.addInt64(4, object.precipitation);
          fbb.addInt64(5, object.time.millisecondsSinceEpoch);
          fbb.addOffset(6, suhuOffset);
          fbb.addOffset(7, maxSuhuOffset);
          fbb.addOffset(8, iconIdOffset);
          fbb.addOffset(9, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = WeatherDailyModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              main: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              time: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, ''),
              suhu: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              maxSuhu: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 18),
              humidity:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              windSpeed:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              precipitation:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              iconId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''));

          return object;
        }),
    WeatherModel: EntityDefinition<WeatherModel>(
        model: _entities[1],
        toOneRelations: (WeatherModel object) => [],
        toManyRelations: (WeatherModel object) => {},
        getId: (WeatherModel object) => object.id,
        setId: (WeatherModel object, int id) {
          object.id = id;
        },
        objectToFB: (WeatherModel object, fb.Builder fbb) {
          final mainOffset = fbb.writeString(object.main);
          final suhuOffset = fbb.writeString(object.suhu);
          final iconIdOffset = fbb.writeString(object.iconId);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, mainOffset);
          fbb.addInt64(2, object.humidity);
          fbb.addFloat64(3, object.windSpeed);
          fbb.addInt64(4, object.precipitation);
          fbb.addInt64(5, object.time.millisecondsSinceEpoch);
          fbb.addOffset(6, suhuOffset);
          fbb.addOffset(7, iconIdOffset);
          fbb.addOffset(8, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = WeatherModel(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              main: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              time: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              suhu: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              humidity:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              windSpeed:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0),
              precipitation:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              iconId: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [WeatherDailyModel] entity fields to define ObjectBox queries.
class WeatherDailyModel_ {
  /// see [WeatherDailyModel.id]
  static final id =
      QueryIntegerProperty<WeatherDailyModel>(_entities[0].properties[0]);

  /// see [WeatherDailyModel.main]
  static final main =
      QueryStringProperty<WeatherDailyModel>(_entities[0].properties[1]);

  /// see [WeatherDailyModel.humidity]
  static final humidity =
      QueryIntegerProperty<WeatherDailyModel>(_entities[0].properties[2]);

  /// see [WeatherDailyModel.windSpeed]
  static final windSpeed =
      QueryDoubleProperty<WeatherDailyModel>(_entities[0].properties[3]);

  /// see [WeatherDailyModel.precipitation]
  static final precipitation =
      QueryIntegerProperty<WeatherDailyModel>(_entities[0].properties[4]);

  /// see [WeatherDailyModel.time]
  static final time =
      QueryIntegerProperty<WeatherDailyModel>(_entities[0].properties[5]);

  /// see [WeatherDailyModel.suhu]
  static final suhu =
      QueryStringProperty<WeatherDailyModel>(_entities[0].properties[6]);

  /// see [WeatherDailyModel.maxSuhu]
  static final maxSuhu =
      QueryStringProperty<WeatherDailyModel>(_entities[0].properties[7]);

  /// see [WeatherDailyModel.iconId]
  static final iconId =
      QueryStringProperty<WeatherDailyModel>(_entities[0].properties[8]);

  /// see [WeatherDailyModel.description]
  static final description =
      QueryStringProperty<WeatherDailyModel>(_entities[0].properties[9]);
}

/// [WeatherModel] entity fields to define ObjectBox queries.
class WeatherModel_ {
  /// see [WeatherModel.id]
  static final id =
      QueryIntegerProperty<WeatherModel>(_entities[1].properties[0]);

  /// see [WeatherModel.main]
  static final main =
      QueryStringProperty<WeatherModel>(_entities[1].properties[1]);

  /// see [WeatherModel.humidity]
  static final humidity =
      QueryIntegerProperty<WeatherModel>(_entities[1].properties[2]);

  /// see [WeatherModel.windSpeed]
  static final windSpeed =
      QueryDoubleProperty<WeatherModel>(_entities[1].properties[3]);

  /// see [WeatherModel.precipitation]
  static final precipitation =
      QueryIntegerProperty<WeatherModel>(_entities[1].properties[4]);

  /// see [WeatherModel.time]
  static final time =
      QueryIntegerProperty<WeatherModel>(_entities[1].properties[5]);

  /// see [WeatherModel.suhu]
  static final suhu =
      QueryStringProperty<WeatherModel>(_entities[1].properties[6]);

  /// see [WeatherModel.iconId]
  static final iconId =
      QueryStringProperty<WeatherModel>(_entities[1].properties[7]);

  /// see [WeatherModel.description]
  static final description =
      QueryStringProperty<WeatherModel>(_entities[1].properties[8]);
}
